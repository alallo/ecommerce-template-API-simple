parameters:
  - name: environment
    type: string
    default: dev1
  - name: function_app_name
    type: string
  - name: terraformVersion
    type: string
    default: 0.14.8
  - name: vmImageName
    type: string
    default: ubuntu-latest 
  - name: subscriptionName
    type: string
    default: 'Azure subscription 1'
  - name: resourceGroupName
    type: string
  - name: storageAccountName
    type: string
  - name: containerName
    type: string
  - name: tfstateKey
    type: string
  - name: workingDir
    type: string
    default: './deploy'

jobs:
- job: deploy
  displayName: "Deploy to ${{parameters.environment}}"
  pool: 
    vmImage: ${{parameters.vmImageName}}
  
  steps:
  - task: qetza.replacetokens.replacetokens-task.replacetokens@3
    displayName: 'Replace tokens in **/*.tfvars'
    inputs:
      targetFiles: '**/*.tfvars'

  - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
    displayName: 'Install Terraform ${{ parameters.terraformVersion }}'
    inputs:
      terraformVersion: ${{ parameters.terraformVersion }}

  - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
    displayName: 'Terraform - azurerm init'
    inputs:
      workingDirectory: ${{ parameters.workingDir }}
      backendServiceArm: ${{ parameters.subscriptionName }}
      backendAzureRmResourceGroupName: ${{ parameters.resourceGroupName }}
      backendAzureRmStorageAccountName: ${{ parameters.storageAccountName }}
      backendAzureRmContainerName: ${{ parameters.containerName }}
      backendAzureRmKey: ${{ parameters.tfstateKey}}

  - task: AzureCLI@2
    displayName: 'Terraform - azurerm apply'
    inputs:
      azureSubscription: ${{ parameters.subscriptionName }}
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        $env:ARM_CLIENT_ID = "$(client_id)"
        $env:ARM_CLIENT_SECRET = "$(client_secret)"
        $env:ARM_SUBSCRIPTION_ID = "$(subscription_id)"
        $env:ARM_TENANT_ID = "$(tenant_id)"
        terraform apply -auto-approve -var-file="terraform.tfvars"
      workingDirectory: ${{ parameters.workingDir }}

  - task: DownloadPipelineArtifact@2
    inputs:
      artifact: 'ecommerce-functions'
      path: $(Build.ArtifactStagingDirectory)
  - task: AzureFunctionApp@1
    displayName: 'Azure functions app deploy'
    inputs:
      azureSubscription: $(serviceConnectionName)
      appType: functionApp
      appName: ${{ parameters.environment }}${{ parameters.function_app_name }}
      package: '$(Build.ArtifactStagingDirectory)/**/*.zip'