parameters:
  - name: environment
    type: string
    default: dev1
  - name: location_short
    type: string
    default: ne
  - name: terraformVersion
    type: string
    default: 0.14.8
  - name: vmImageName
    type: string
    default: ubuntu-latest 
  - name: subscriptionName
    type: string
    default: 'Azure subscription 1'
  - name: resourceGroupName
    type: string
  - name: storageAccountName
    type: string
  - name: containerName
    type: string
  - name: tfstateKey
    type: string
  - name: workingDir
    type: string
    default: './deploy'

jobs:
- job: deploy
  displayName: "Deploy to ${{parameters.environment}}"
  pool: 
    vmImage: ${{parameters.vmImageName}}
  
  steps:
  - task: qetza.replacetokens.replacetokens-task.replacetokens@3
    displayName: 'Replace tokens in **/*.tfvars'
    inputs:
      targetFiles: '**/*.tfvars'

  - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
    displayName: 'Install Terraform ${{ parameters.terraformVersion }}'
    inputs:
      terraformVersion: ${{ parameters.terraformVersion }}

  - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV1@0
    displayName: 'Terraform - azurerm init'
    inputs:
      workingDirectory: ${{ parameters.workingDir }}
      backendServiceArm: ${{ parameters.subscriptionName }}
      backendAzureRmResourceGroupName: ${{ parameters.resourceGroupName }}
      backendAzureRmStorageAccountName: ${{ parameters.storageAccountName }}
      backendAzureRmContainerName: ${{ parameters.containerName }}
      backendAzureRmKey: ${{ parameters.tfstateKey}}

  - task: AzureCLI@2
    displayName: 'Terraform - azurerm apply'
    name: terraformApply
    inputs:
      azureSubscription: ${{ parameters.subscriptionName }}
      scriptType: pscore
      scriptLocation: inlineScript
      inlineScript: |
        $env:ARM_CLIENT_ID = "$(client_id)"
        $env:ARM_CLIENT_SECRET = "$(client_secret)"
        $env:ARM_SUBSCRIPTION_ID = "$(subscription_id)"
        $env:ARM_TENANT_ID = "$(tenant_id)"
        terraform apply -auto-approve -var-file="terraform.tfvars"
      workingDirectory: ${{ parameters.workingDir }}

  - powershell: |
      function GetTerraformOutput {
          foreach ($property in (terraform output -json | ConvertFrom-Json).PSObject.Properties)
          {
              if ($property.Value.value.GetType().BaseType.Name -eq "Array")
              {
                  Write-Host "##vso[task.setvariable variable=$($property.Name);issecret=$($property.Value.sensitive)]$($property.Value.value -join ", ")"
      
                  for ($i = 0; $i -lt $property.Value.value.Count; $i++)
                  {
                      Write-Host "##vso[task.setvariable variable=$($property.Name)$i;issecret=$($property.Value.sensitive)]$($property.Value.value[$i])"
                  }
                  continue
              }
              
              Write-Host "##vso[task.setvariable variable=$($property.Name);issecret=$($property.Value.sensitive)]$($property.Value.value)"
          }
      }
      
      GetTerraformOutput
    workingDirectory: ${{ parameters.workingDir }}
    displayName: 'Get the terraform output and inject them in the AzureDevops pipeline'

  - task: DownloadPipelineArtifact@2
    inputs:
      artifact: 'ecommerce-functions'
      path: $(Build.ArtifactStagingDirectory)
  - task: AzureFunctionApp@1
    displayName: 'Azure functions app deploy'
    inputs:
      azureSubscription: $(serviceConnectionName)
      appType: functionAppLinux
      appName: fa-ecomm-${{ parameters.environment }}-${{ parameters.location_short }}-01
      package: '$(Build.ArtifactStagingDirectory)/**/*.zip'
      AppSettings: '-keyVaultName $(kvname)'