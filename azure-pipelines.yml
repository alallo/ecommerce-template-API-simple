trigger:
- main

variables:
 - group: "dev-ecommerce"
 - name: vmImageName
   value: 'ubuntu-latest'
 - name: workingDirectory
   value: '$(System.DefaultWorkingDirectory)/Ecommerce.Functions'

stages:
- stage: Build
  displayName: Build stage

  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        command: 'build'
        projects: |
          $(workingDirectory)/*.csproj
        arguments: --output $(System.DefaultWorkingDirectory)/publish_output --configuration Release

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/publish_output'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(System.DefaultWorkingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - publish: $(System.DefaultWorkingDirectory)/$(Build.BuildId).zip
      artifact: drop
          
- stage: Dev
  displayName: Deploy stage
  dependsOn: Build
  jobs:
    - template: Deploy/terraform-pipelines.yml
      parameters:
          environment: dev
          vmImageName: $(vmImageName)
          resourceGroupName: '$(resourceGroupName)'
          storageAccountName: '$(storageAccountName)'
          containerName: '$(containerName)'
          workingDir: 'Deploy/terraform'
          tfstateKey: '$(tfstateKey)'
